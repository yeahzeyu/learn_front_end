/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./animation.js":
/*!**********************!*\
  !*** ./animation.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Timeline\": () => (/* binding */ Timeline),\n/* harmony export */   \"Animation\": () => (/* binding */ Animation)\n/* harmony export */ });\n/* harmony import */ var _cubicBezier_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cubicBezier.js */ \"./cubicBezier.js\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/*\r\n    实现动画最重要的是要有一个帧的概念，每帧去执行一个什么样的事件\r\n    JavaScript里面处理帧的集中方案，一般的动画都是16ms一帧，因为1s人眼能识别的最高帧数是60帧，1000ms/60帧 得到16ms一帧\r\n    1、setInterval\r\n    setInterval(() => {}， 16); //比较不推荐，因为setInterval比较不可控，浏览器会不会依据16ms执行不好说，再一个一旦代码没写好，setInterval容易发生积压\r\n\r\n    2、setTimeout\r\n    let tick = () => {\r\n        setTimeout(tick, 16); //选择执行完后自重复的写法，比setInterval更加安全\r\n    });\r\n\r\n    3、requestAnimationFrame\r\n    let tick = () => {\r\n        let handler = requestAnimationFrame(tick) //现代浏览器中写动画比较常用的，简称rAF，申请浏览器执行下一帧的时候来执行这个代码，与上面不同，它是跟浏览器的帧率相关的，比如浏览器做一些降帧降频的操作时，它可能就会跟着降帧\r\n        //cancelAnimationFrame(handler); //注销，避免资源浪费\r\n    }\r\n    通常会把执行自身的tick包装成一个概念，叫timeLine\r\n*/\n //除了本身这个js文件外，其他地方都无法访问到这个symbol，可以用这个symbol做key\n//可以把symbol理解成一种特殊的字符串，只不过是它永远不会重复，即使你两个symbol都叫tick，它俩也是不同的\n//使用全大写加下划线的风格来表示常量\n\nvar TICK = Symbol(\"tick\");\nvar TICK_HANDLER = Symbol(\"tick-handler\");\nvar ANIMATIONS = Symbol(\"animations\");\nvar START_TIME = Symbol(\"start-time\");\nvar PAUSE_START = Symbol(\"pause-start\");\nvar PAUSE_TIME = Symbol(\"pause-time\");\nvar Timeline = /*#__PURE__*/function () {\n  function Timeline() {\n    _classCallCheck(this, Timeline);\n\n    //一般做变量的初始化，不会做太多的事情\n    //下面这种写法，tick还是可以被外界调用到的，正确的方法是另写一个常量\n    this.state = \"Inited\";\n    this[ANIMATIONS] = new Set();\n    this[START_TIME] = new Map();\n  }\n\n  _createClass(Timeline, [{\n    key: \"start\",\n    value: function start() {\n      var _this = this;\n\n      //一个timeLine一般只要start了就可以了，不会有一个对应的stop，但是它可能有pause和resume\n      //即启动tick，这里应把tick藏起来，变成一个私有的方法\n      if (this.state !== \"Inited\") {\n        return; //这里选择静默的fail，直接return掉，当然你也可以选择抛出错误，这个是API设计的风格\n      }\n\n      this.state = \"started\";\n      var startTime = Date.now();\n      this[PAUSE_TIME] = 0;\n\n      this[TICK] = function () {\n        var now = Date.now();\n\n        var _iterator = _createForOfIteratorHelper(_this[ANIMATIONS]),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var animation = _step.value;\n            var t = void 0;\n\n            if (_this[START_TIME].get(animation) < startTime) {\n              t = now - startTime - _this[PAUSE_TIME] - animation.delay; //减掉暂停的时间\n            } else {\n              t = now - _this[START_TIME].get(animation) - _this[PAUSE_TIME] - animation.delay; //减掉暂停的时间\n            }\n\n            if (t > animation.duration) {\n              _this[ANIMATIONS][\"delete\"](animation);\n\n              t = animation.duration;\n            } //console.log(\"tick\"); //tick是用于形容钟表滴答声的词，所以用来表示时间线是比较准确的\n\n\n            if (t > 0) //如果t < 0，说明动画还没开始，延迟时间还没结束\n              animation.receive(t);\n          } //要实现暂停和回复，要吧TICK取消掉，用TICK_HANDLER管理\n\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        _this[TICK_HANDLER] = requestAnimationFrame(_this[TICK]);\n      };\n\n      this[TICK]();\n    }\n    /*\r\n    set rate() {\r\n        //不是所有timeLine都提供的，表示可以让动画倍速，快进或快退\r\n      }\r\n    get rate() {\r\n        //不是所有timeLine都提供的，表示可以让动画倍速，快进或快退\r\n      }\r\n    */\n\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      //暂停，对我们的轮播组件carousel很重要，必须实现\n      //需要记录暂停开始的时间，以及暂停截止的时间\n      if (this.state !== \"started\") {\n        return;\n      }\n\n      this.state = \"paused\";\n      this[PAUSE_START] = Date.now();\n      cancelAnimationFrame(this[TICK_HANDLER]);\n    }\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      if (this.state !== \"paused\") {\n        return;\n      }\n\n      this.state = \"started\";\n      this[PAUSE_TIME] += Date.now() - this[PAUSE_START]; //恢复，对我们的轮播组件carousel很重要，必须实现\n\n      this[TICK]();\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      //重启，将时间线状态清空成初始干净的，可以用于复用\n      console.log('reset');\n      this.pause();\n      this.state = \"inited\";\n      var startTime = Date.now(); //???\n\n      this[PAUSE_TIME] = 0;\n      this[ANIMATIONS] = new Set();\n      this[START_TIME] = new Map();\n      this[PAUSE_START] = 0;\n      this[TICK_HANDLER] = null;\n    }\n  }, {\n    key: \"add\",\n    value: function add(animation, startTime) {\n      if (arguments.length < 2) {\n        startTime = Date.now();\n      } //如果addTime本身是在startTime之前的话，可以认为t跟t0之间是相等的关系，都为0\n      //如果是在动画开始之后再添加的animation呢，就需要设定一个初始的开始时间\n      //相对的还会需要一个remove\n\n\n      this[ANIMATIONS].add(animation);\n      this[START_TIME].set(animation, startTime);\n    }\n  }]);\n\n  return Timeline;\n}();\nvar Animation = /*#__PURE__*/function () {\n  //CSS的动画transition是有duration、delay的\n  //属性动画，把一个对象的属性从一个值变成另外一个值\n  //与属性动画相对的，还有帧动画，比如每秒来一张图片\n  function Animation(object, property, startValue, endValue, duration, delay, timingFunction, template) {\n    _classCallCheck(this, Animation);\n\n    //对象，属性，初始值，终止值，执行时长，差值函数（如何变，是均匀还是动态）,...（后面还有其他参数，比如值的单位，如像素px）\n    timingFunction = timingFunction || function (v) {\n      return v;\n    };\n\n    template = template || function (v) {\n      return v;\n    };\n\n    this.object = object;\n    this.property = property;\n    this.startValue = startValue;\n    this.endValue = endValue;\n    this.duration = duration;\n    this.timingFunction = timingFunction;\n    this.delay = delay;\n    this.template = template;\n  } //一般timeline里面不会做太多事情的\n\n\n  _createClass(Animation, [{\n    key: \"receive\",\n    value: function receive(time) {\n      //用于执行，类似exec,go\n      console.log(time); //要增加终止的条件\n\n      var range = this.endValue - this.startValue; //timingFunction是一个根据0到1的time，来返回0到1的progress的函数，在CSS里面会去写几类，比如linear的timingFunction\n\n      var progress = this.timingFunction(time / this.duration); //进展，为了实现一些缓动的效果，不是直接用range去乘progress\n      //这里就需要应用到三次贝塞尔曲线，描述从[0,0]到[1,1]的过程\n\n      this.object[this.property] = this.template(this.startValue + range * progress); //这里没有考虑timingFunction，只实现了一个均匀变化\n    }\n  }]);\n\n  return Animation;\n}();\n\n//# sourceURL=webpack://jsx/./animation.js?");

/***/ }),

/***/ "./carousel.js":
/*!*********************!*\
  !*** ./carousel.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Carousel\": () => (/* binding */ Carousel)\n/* harmony export */ });\n/* harmony import */ var _framework_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./framework.js */ \"./framework.js\");\n/* harmony import */ var _gesture_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./gesture.js */ \"./gesture.js\");\n/* harmony import */ var _animation_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./animation.js */ \"./animation.js\");\n/* harmony import */ var _cubicBezier_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./cubicBezier.js */ \"./cubicBezier.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n\n\n\n\nvar Carousel = /*#__PURE__*/function (_Component) {\n  _inherits(Carousel, _Component);\n\n  var _super = _createSuper(Carousel);\n\n  function Carousel() {\n    var _this;\n\n    _classCallCheck(this, Carousel);\n\n    _this = _super.call(this); //不能在super里面调render，这是有问题的\n\n    _this.attributes = Object.create(null); //创建一个空对象，我们尽量用比较正确的名字\n    // this.props = Object.create(null); //react这里是用props，因为它的attribute和property不分\n\n    return _this;\n  }\n\n  _createClass(Carousel, [{\n    key: \"setAttribute\",\n    value: function setAttribute(name, value) {\n      this.attributes[name] = value;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      this.root = document.createElement(\"div\");\n      this.root.classList.add(\"carousel\");\n\n      var _iterator = _createForOfIteratorHelper(this.attributes.src),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var record = _step.value;\n          var child = document.createElement('div');\n          child.style.backgroundImage = \"url('\".concat(record, \"')\");\n          this.root.appendChild(child);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      (0,_gesture_js__WEBPACK_IMPORTED_MODULE_1__.enableGesture)(this.root);\n      var children = this.root.children; //需要让图片真正地挪动地方\n\n      var position = 0; //这里的局部变量是做为state的\n      //组件化里面，并不是说state一定要写成某种代码形态，而是要客观上有这个东西\n      //比如这里都写在render里面，就可以用局部变量做state\n\n      this.root.addEventListener(\"pan\", function (event) {\n        console.log(event.clientX);\n      });\n      this.root.addEventListener(\"tap\", function () {\n        //在浏览器模拟移动端环境下，mousedown和touchstart像都会触发\n        //代码中已尝试解决这一问题，请老师审阅方案是否可行\n        console.log(\"tap event trigger!!!!!\");\n      });\n      /*\r\n      this.root.addEventListener(\"mousedown\", event => {\r\n          //拖拽动作需要通过mousedown、mousemove、mouseup三个事件组合实现\r\n          console.log(\"mousedown\");\r\n          let children = this.root.children;\r\n          let startX = event.clientX;\r\n            let move = event => {\r\n              console.log(\"mousemove\");\r\n              let x = event.clientX - startX; //计算出鼠标移动的水平\r\n              //鼠标拖动比自动轮播更为复杂，鼠标拖动还需要考虑水平或垂直的正反两个方向\r\n                //首先必须计算出当前显示的元素的位置\r\n              let current = position - Math.round((x - x % 500) / 500);\r\n                for (let offset of [-2, -1, 0, 1, 2]) { //如果想要避免一些比较奇特的bug，这里也可以算多几个，比如5个 -2, -1, 0, 1, 2\r\n                  //同时处理当前显示的元素的前一个和后一个\r\n                  let pos = current + offset; //不希望出现负数\r\n                  pos = (pos + children.length) % children.length;\r\n                    children[pos].style.transition = \"none\";\r\n                  children[pos].style.transform = `translateX(${-pos * 500 + offset * 500 + x % 500}px)`;\r\n                  //为什么要加500呢，因为挪到第二张的时候，就是第二张的translate了，500是当前的图片宽，正常应该去取children的getClientRect的\r\n              }\r\n                //还是由于同一时刻可是区域最多只能显示两张图，所以进行偏移的图片只需要有两张，并不需要所有，这里可优化\r\n              //比较推荐使用clientX和clientY\r\n              //表示相对浏览器中间可见区域的相对位置\r\n              //好处就在不会因为滚动等操作而改变\r\n              //console.log(event.clientX, event.clientY)\r\n          };\r\n          let up = event => {\r\n              console.log(\"mouseup\");\r\n              let x = event.clientX - startX; //计算出鼠标移动的水平\r\n              //this.root.removeEventListener(\"mousemove\", move);\r\n              //this.root.removeEventListener(\"mouseup\", up);\r\n              //现代浏览器中在document上监听还会有额外的好处，document它可以产生，即使我们鼠标移出到浏览器外，它也能监听到事件并触发他们\r\n              position = position - Math.round(x / 500);\r\n              for (let offset of [0, -Math.sign(Math.round(x / 500) - x + 250 * Math.sign(x))]) { //Math.round(x / 500) - x表示滚动的方向，再对其进行取符号的操作，变成+1或-1\r\n                  //同时处理当前显示的元素的前一个和后一个\r\n                  let pos = position + offset; //不希望出现负数\r\n                  pos = (pos + children.length) % children.length;\r\n                  children[pos].style.transition = \"\";\r\n                  children[pos].style.transform = `translateX(${-pos * 500 + offset * 500}px)`;\r\n                  //为什么要加500呢，因为挪到第二张的时候，就是第二张的translate了，500是当前的图片宽，正常应该去取children的getClientRect的\r\n              }\r\n                document.removeEventListener(\"mousemove\", move);\r\n              document.removeEventListener(\"mouseup\", up);\r\n          }\r\n          document.addEventListener(\"mousemove\", move);\r\n          document.addEventListener(\"mouseup\", up);\r\n      });\r\n      */\n\n      /*\r\n      //实现自动循环轮播\r\n      //由于轮播窗口可视区域同时出现的只有两张图，可以定义为current和next\r\n      //思路是先用一帧的时间，将next图偏移到合适的位置，注意要取消掉动画，然后再跟current图一起，执行向左偏移的动画\r\n      let currentIndex = 0;\r\n      setInterval(() => {\r\n          let children = this.root.children;\r\n          let nextIndex = (currentIndex + 1) % children.length;\r\n          let current = children[currentIndex];\r\n          let next = children[nextIndex];\r\n          next.style.transition = \"none\";\r\n          next.style.transform = `translateX(${100 - nextIndex * 100}%)`;\r\n            setTimeout(() => {\r\n              next.style.transition = \"\";\r\n              current.style.transform = `translateX(${-100 - currentIndex * 100}%)`;\r\n              next.style.transform = `translateX(${- nextIndex * 100}%)`;\r\n              currentIndex = nextIndex;\r\n          }, 16); //16毫秒是浏览器里面一帧的时间\r\n          //如果用requestAnimationFrame的话要用两次，逻辑比较复杂\r\n      }, 3000)\r\n      */\n\n      /*\r\n      //到达最后一张图时，往回滚动到了第一张图\r\n      let current = 0;\r\n      setInterval(() => {\r\n          let children = this.root.children;\r\n          ++current;\r\n          current = current % children.length;\r\n          for(let child of children) {\r\n              child.style.transform = `translateX(-${current * 100}%)`;\r\n          }\r\n      }, 3000)\r\n      */\n\n      return this.root;\n    }\n  }, {\n    key: \"mountTo\",\n    value: function mountTo(parent) {\n      parent.appendChild(this.render()); //这样才能保证render一定在setAttribute后被调用\n    }\n  }]);\n\n  return Carousel;\n}(_framework_js__WEBPACK_IMPORTED_MODULE_0__.Component);\n\n//# sourceURL=webpack://jsx/./carousel.js?");

/***/ }),

/***/ "./cubicBezier.js":
/*!************************!*\
  !*** ./cubicBezier.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cubicBezier\": () => (/* binding */ cubicBezier),\n/* harmony export */   \"ease\": () => (/* binding */ ease),\n/* harmony export */   \"easeIn\": () => (/* binding */ easeIn),\n/* harmony export */   \"easeOut\": () => (/* binding */ easeOut),\n/* harmony export */   \"easeInOut\": () => (/* binding */ easeInOut),\n/* harmony export */   \"linear\": () => (/* binding */ linear)\n/* harmony export */ });\n//三次贝塞尔曲线，是牛顿积分求的\nfunction cubicBezier(p1x, p1y, p2x, p2y) {\n  var ZERO_LIMIT = 1e-6; // Calculate the polynomial coefficients,\n  // implicit first and last control points are (0, 0) and (1,1)\n\n  var ax = 3 * p1x - 3 * p2x + 1;\n  var bx = 3 * p2x - 6 * p1x;\n  var cx = 3 * p1x;\n  var ay = 3 * p1y - 3 * p2y + 1;\n  var by = 3 * p2y - 6 * p1y;\n  var cy = 3 * p1y;\n\n  function sampleCurveDerivativeX(t) {\n    // `ax t^3 + bx t^2 + cx t` expanded using Horner's rule\n    return (3 * ax * t + 2 * bx) * t + cx;\n  }\n\n  function sampleCurveX(t) {\n    return ((ax * t + bx) * t + cx) * t;\n  }\n\n  function sampleCurveY(t) {\n    return ((ay * t + by) * t + cy) * t;\n  } // Given an x value, find a parametric value it came from\n\n\n  function solveCurveX(x) {\n    var t2 = x;\n    var derivative;\n    var x2; // https//trac.webkit.org/browser/trunk/Source/WebCore/platform/animation\n    // First try a few iterations of Newton's method -- normally very fast.\n    // http://en.wikipedia.org/wiki/Newton's_method\n\n    for (var i = 0; i < 8; i++) {\n      // f(t)-x = 0;\n      x2 = sampleCurveX(t2) - x;\n\n      if (Math.abs(x2) < ZERO_LIMIT) {\n        return t2;\n      }\n\n      derivative = sampleCurveDerivativeX(t2); // == 0, failure\n\n      /* istanbul ignore if */\n\n      if (Math.abs(derivative) < ZERO_LIMIT) {\n        break;\n      }\n\n      t2 -= x2 / derivative;\n    } // Fall back to the bisection method for reliability.\n    // bisection\n    // http://en.wikipedia.org/wiki/Bisection_method\n\n\n    var t1 = 1;\n    /* istanbul ignore next */\n\n    var t0 = 0;\n    /* istanbul ignore next */\n\n    t2 = x;\n    /* istanbul ignore next */\n\n    while (t1 > t0) {\n      x2 = sampleCurveX(t2) - x;\n\n      if (Math.abs(x2) < ZERO_LIMIT) {\n        return t2;\n      }\n\n      if (x2 > 0) {\n        t1 = t2;\n      } else {\n        t0 = t2;\n      }\n\n      t2 = (t1 + t0) / 2;\n    } // Failure\n\n\n    return t2;\n  }\n\n  function solve(x) {\n    return sampleCurveY(solveCurveX(x));\n  }\n\n  return solve;\n}\nvar ease = cubicBezier(.25, .1, .25, 1);\nvar easeIn = cubicBezier(.42, 0, 1, 1);\nvar easeOut = cubicBezier(0, 0, .58, 1);\nvar easeInOut = cubicBezier(.42, 0, .58, 1);\nvar linear = cubicBezier(0, 0, 1, 1);\n\n//# sourceURL=webpack://jsx/./cubicBezier.js?");

/***/ }),

/***/ "./framework.js":
/*!**********************!*\
  !*** ./framework.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"createElement\": () => (/* binding */ createElement),\n/* harmony export */   \"Component\": () => (/* binding */ Component)\n/* harmony export */ });\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction createElement(type, attributes) {\n  var element;\n  if (typeof type === \"string\") //原生标签\n    element = new ElementWrapper(type);else //type为class，需生成实例\n    element = new type();\n\n  for (var name in attributes) {\n    element.setAttribute(name, attributes[name]);\n  }\n\n  for (var _len = arguments.length, children = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    children[_key - 2] = arguments[_key];\n  }\n\n  for (var _i = 0, _children = children; _i < _children.length; _i++) {\n    var child = _children[_i];\n\n    if (typeof child === \"string\") {\n      child = new TextWrapper(child);\n    }\n\n    element.appendChild(child);\n  }\n\n  return element;\n}\nvar Component = /*#__PURE__*/function () {\n  function Component(type) {//this.root = this.render();\n\n    _classCallCheck(this, Component);\n  }\n\n  _createClass(Component, [{\n    key: \"setAttribute\",\n    value: function setAttribute(name, value) {\n      this.root.setAttribute(name, value);\n    }\n  }, {\n    key: \"appendChild\",\n    value: function appendChild(child) {\n      child.mountTo(this.root);\n    }\n  }, {\n    key: \"mountTo\",\n    value: function mountTo(parent) {\n      parent.appendChild(this.root);\n    }\n  }]);\n\n  return Component;\n}();\n\nvar ElementWrapper = /*#__PURE__*/function (_Component) {\n  _inherits(ElementWrapper, _Component);\n\n  var _super = _createSuper(ElementWrapper);\n\n  function ElementWrapper(type) {\n    var _this;\n\n    _classCallCheck(this, ElementWrapper);\n\n    _this.root = document.createElement(type);\n    return _possibleConstructorReturn(_this);\n  }\n\n  return ElementWrapper;\n}(Component);\n\nvar TextWrapper = /*#__PURE__*/function (_Component2) {\n  _inherits(TextWrapper, _Component2);\n\n  var _super2 = _createSuper(TextWrapper);\n\n  function TextWrapper(content) {\n    var _this2;\n\n    _classCallCheck(this, TextWrapper);\n\n    _this2.root = document.createTextNode(content);\n    return _possibleConstructorReturn(_this2);\n  }\n\n  return TextWrapper;\n}(Component);\n\n//# sourceURL=webpack://jsx/./framework.js?");

/***/ }),

/***/ "./gesture.js":
/*!********************!*\
  !*** ./gesture.js ***!
  \********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Dispatcher\": () => (/* binding */ Dispatcher),\n/* harmony export */   \"Listerner\": () => (/* binding */ Listerner),\n/* harmony export */   \"Recognizer\": () => (/* binding */ Recognizer),\n/* harmony export */   \"enableGesture\": () => (/* binding */ enableGesture)\n/* harmony export */ });\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n//let element = document.documentElement;\n//let handler;\n//let startX, startY;\n//let isPan = false, isTap = true, isPress = false; //是否应该是全局的呢？\n//如果从触屏的角度考虑，会有多个触点的情况\n//如果从鼠标的角度考虑，会有左右键的区分\n//所以全局变量的形式是错误的\n//那么除了全局之外，剩下的只有一个选项，context\n//flick事件是以上事件中当中最为特殊的一个，因为它还需要判断速度\n//我们可以在move的时候得到当前这一次move的速度，但是这个并不能够帮助我们去处理，因为这个速度如果我们只判断两个点之间的速度，根据浏览器实现的不同，会有一个较大的误差，\n//所以我们对速度的判断，应该是取数个点的速度进行平均\n//这里会采用一个存储一段时间内的点的方式，来做平均速度的计算\n//进一步实现事件派发，dom里面事件的派发是使用new event实现的\nvar Dispatcher = /*#__PURE__*/function () {\n  function Dispatcher(element) {\n    _classCallCheck(this, Dispatcher);\n\n    this.element = element;\n  }\n\n  _createClass(Dispatcher, [{\n    key: \"dispatch\",\n    value: function dispatch(type, properties) {\n      //将原本的context, point先预处理成properties这样的kv结构后再传进来\n      //let event = new CustomEvent(type, {});\n      var event = new Event(type);\n\n      for (var name in properties) {\n        event[name] = properties[name];\n      } //dispatch实际上是需要是一个元素的\n\n\n      this.element.dispatchEvent(event); //console.log(event);\n    }\n  }]);\n\n  return Dispatcher;\n}(); //待补充，将剩余事件都实现派发，把事件加上必要的参数，我们所有需要的参数，基本都在context里面了\n//做一个解耦的分析，上述内容会分为三个部分\n//listen => recognize => dispatch\n//监听、识别而后重新分发\n// new Listener(new Recognizer(new Dispatcher))\n// new Listener(new Recognizer(dispatch))\n// Listerner可以是一个DOM Listener或者是别的\n// Dispatcher可以是一个DOM Dispatcher或者是别的\n\nvar Listerner = function Listerner(element, recognizer) {\n  var _this = this;\n\n  _classCallCheck(this, Listerner);\n\n  //把element和识别器放进来\n  var isTouch = false;\n  var touchTimeout = null;\n  var isListeningMouse = false; //用这个全局变量来表示是否已经开始监听鼠标了，如果已经开始监听，则不再绑定新的监听\n\n  var contexts = new Map();\n  this.element = element;\n  this.recognizer = recognizer; //在模拟环境下，mousedown和touchstart好像会同时触发，touchstart快一些，之后是mousedown\n  //鼠标支持左键、右键、中键、前进、后退，在浏览器的模型里面，它至少支持5个建的down和up\n\n  var mousedown = function mousedown(event) {\n    if (isTouch) return; //console.log(event.button);\n    //左中右：0、1、2，前后：3、4\n\n    var context = Object.create(null); //使用Object.create(null)表示我们要对一个对象做一个kv的匹配，这样可以避免object上那些原始的属性的干扰\n\n    contexts.set(\"mouse\" + (1 << event.button), context);\n\n    _this.recognizer.start(event, context);\n\n    var mousemove = function mousemove(event) {\n      //console.log(event.clientX, event.clientY);\n      //mousedown是分按键的，可mousemove是不分按键的\n      //但它包含一个buttons，buttons的值采用了一个古典的设计，使用二进制的掩码来做的，比如0b00001，代表的是左键被按下了，0b00010代表的是中键被按下，0b00011代表的是中键和左键被按下\n      var button = 1;\n\n      while (button <= event.buttons) {\n        //这个判断是为了保证button不会移出界\n        //这里还需要加一个判断，只有某个键被按下去了，才会进一步触发move，不能循环全部都调用move\n        //要用一个按位与的运算，这就是掩码的作用，在本例这里只有当button与event.button相同时，值才大于0\n        //这里其实还有一个坑，buttons的顺序跟我们通过1移动event.button位构造出来的数不是完全相同的，它们的第二位和第三位刚好是相反的，代表鼠标的中键和右键的那两位刚好是相反的\n        //所以这里需要做一个额外的处理\n        //order of buttons & button property is not same\n        if (button & event.buttons) {\n          var key = void 0;\n          if (button === 2) key = 4;else if (button === 4) key = 2;else key = button;\n\n          var _context = contexts.get(\"mouse\" + key);\n\n          _this.recognizer.move(event, _context);\n        }\n\n        button = button << 1;\n      }\n    };\n\n    var mouseup = function mouseup(event) {\n      //mouseup也是有button属性的\n      //console.log(\"end\", event.button);\n      //教程里面winter老师的测试当中是end 0发生了两次，实际上，end2等也有可能发生，当多个键被按下的时候，会触发多次mousedown的事件，由于左右键未必是真正同时被按下，\n      //所以先被按下的那个键会被绑定多次mouse move和mouse up的时间监听\n      var context = contexts.get(\"mouse\" + (1 << event.button));\n\n      _this.recognizer.end(event, context);\n\n      contexts[\"delete\"](\"mouse\" + (1 << event.button));\n\n      if (event.buttons === 0) {\n        document.removeEventListener(\"mousemove\", mousemove);\n        document.removeEventListener(\"mouseup\", mouseup);\n        isListeningMouse = false;\n      }\n    };\n\n    if (!isListeningMouse) {\n      document.addEventListener(\"mousemove\", mousemove);\n      document.addEventListener(\"mouseup\", mouseup);\n      isListeningMouse = true;\n    }\n  };\n\n  this.element.addEventListener(\"mousedown\", mousedown); //touch系列的事件跟鼠标有所不同，一旦触发了touchstart，之后必定会触发touchmove，且作用在同一元素上，因此不需要跟mousedown一样才去嵌套的写法\n  //理解上可以与mouse系列的一一对应，但其内在逻辑和我们写出来的代码是完全不一样的\n  //因为touchmove无法脱离touchstart而单独触发的，而鼠标不同，按不按都可以晃\n  //touch系列事件比mouse系列事件多了一个cancel\n\n  this.element.addEventListener(\"touchstart\", function (event) {\n    isTouch = true; //event.stopPropagation(); \n    //event.preventDefault();\n    //element.removeEventListener(\"mousedown\", mousedown);\n    //event里面有多个触点\n    //identifier是用来表示touch的唯一id\n    //console.log(event.changedTouches);\n\n    var _iterator = _createForOfIteratorHelper(event.changedTouches),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var touch = _step.value;\n        var context = Object.create(null);\n        contexts.set(touch.identifier, context); //console.log(\"start\", touch.clientX, touch.clientY);\n\n        _this.recognizer.start(touch, context);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  });\n  this.element.addEventListener(\"touchmove\", function (event) {\n    //console.log(event.changedTouches);\n    var _iterator2 = _createForOfIteratorHelper(event.changedTouches),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var touch = _step2.value;\n        //console.log(\"move\", touch.clientX, touch.clientY);\n        var context = contexts.get(touch.identifier);\n\n        _this.recognizer.move(touch, context);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  });\n  this.element.addEventListener(\"touchend\", function (event) {\n    clearTimeout(touchTimeout);\n    touchTimeout = setTimeout(function () {\n      isTouch = false;\n    }, 500); //console.log(event.changedTouches);\n\n    var _iterator3 = _createForOfIteratorHelper(event.changedTouches),\n        _step3;\n\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var touch = _step3.value;\n        //console.log(\"end\", touch.clientX, touch.clientY);\n        var context = contexts.get(touch.identifier);\n\n        _this.recognizer.end(touch, context);\n\n        contexts[\"delete\"](touch.identifier);\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n  });\n  this.element.addEventListener(\"touchcancel\", function (event) {\n    isTouch = false; //console.log(event.changedTouches);\n    //被异常事件打断，如alert\n\n    var _iterator4 = _createForOfIteratorHelper(event.changedTouches),\n        _step4;\n\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var touch = _step4.value;\n        var context = contexts.get(touch.identifier); //console.log(\"cancel\", touch.clientX, touch.clientY);\n\n        recognizer.cancel(touch);\n        contexts[\"delete\"](touch.identifier);\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n  });\n};\nvar Recognizer = /*#__PURE__*/function () {\n  function Recognizer(dispatcher) {\n    _classCallCheck(this, Recognizer);\n\n    this.dispatcher = dispatcher; //因为最后派发的肯定是一个函数\n  }\n\n  _createClass(Recognizer, [{\n    key: \"start\",\n    value: function start(point, context) {\n      var _this2 = this;\n\n      //console.log(\"start\", point.clientX, point.clientY);\n      context.startX = point.clientX, context.startY = point.clientY;\n      context.points = [{\n        t: Date.now(),\n        x: point.clientX,\n        y: point.clientY\n      }];\n      context.isTap = true;\n      context.isPan = false;\n      context.isPress = false;\n      context.handler = setTimeout(function () {\n        context.isTap = false;\n        context.isPan = false;\n        context.isPress = true;\n        context.handler = null; //console.log(\"press\");\n\n        _this2.dispatcher.dispatch(\"press\", {});\n      }, 500);\n    }\n  }, {\n    key: \"move\",\n    value: function move(point, context) {\n      var dx = point.clientX - context.startX;\n      var dy = point.clientY - context.startY;\n\n      if (Math.pow(dx, 2) + Math.pow(dy, 2) > 100) {\n        context.isTap = false;\n        context.isPan = true;\n        context.isPress = false;\n        context.isVertical = Math.abs(dx) < Math.abs(dy); //用于区分是上下滑，还是左右滑\n        //console.log(\"panstart\");\n\n        this.dispatcher.dispatch(\"panstart\", {\n          startX: context.startX,\n          startY: context.startY,\n          clientX: point.clientX,\n          clientY: point.clientY,\n          isVertical: context.isVertical\n        });\n        clearTimeout(context.handler);\n      }\n\n      if (context.isPan) {\n        //console.log(dx, dy);\n        //console.log(\"pan\");\n        this.dispatcher.dispatch(\"pan\", {\n          startX: context.startX,\n          startY: context.startY,\n          clientX: point.clientX,\n          clientY: point.clientY,\n          isVertical: context.isVertical\n        });\n      } //在放进新的点之前会做一个过滤，让它只存取半秒内的速度，这样我们才能保正计算最新的速度\n\n\n      context.points = context.points.filter(function (point) {\n        return Date.now() - point.t < 500;\n      });\n      context.points.push({\n        t: Date.now(),\n        x: point.clientX,\n        y: point.clientY\n      }); //console.log(\"move\", point.clientX, point.clientY);\n    }\n  }, {\n    key: \"end\",\n    value: function end(point, context) {\n      if (context.isTap) {\n        //console.log(\"tap\");\n        this.dispatcher.dispatch(\"tap\", {});\n        clearTimeout(context.handler);\n      }\n\n      if (context.isPress) {\n        this.dispatcher.dispatch(\"pressend\", {}); //console.log(\"pressEnd\");\n      } //console.log(\"end\", point.clientX, point.clientY);\n\n\n      context.points = context.points.filter(function (point) {\n        return Date.now() - point.t < 500;\n      }); //由于最后停下来时可能会导致数组为空，因此在此处多push一个点进去\n\n      /*\r\n      context.points.push({\r\n          t: Date.now(),\r\n          x: point.clientX,\r\n          y: point.clientY\r\n      })\r\n      */\n\n      var d, v;\n\n      if (!context.points.length) {\n        v = 0;\n      } else {\n        d = Math.sqrt(Math.pow(point.clientX - context.points[0].x, 2) + Math.pow(point.clientY - context.points[0].y, 2)); //三角形公式 a**2 + b**2 = c**2\n\n        v = d / (Date.now() - context.points[0].t);\n      } //根据经验，我们可以认为这个速度是大于1.5像素每毫秒就是比较快的了\n      //console.log(\"v\", v);\n\n\n      if (v > 1.5) {\n        //console.log(\"flick\");\n        context.isFlick = true;\n        this.dispatcher.dispatch(\"flick\", {\n          startX: context.startX,\n          startY: context.startY,\n          clientX: point.clientX,\n          clientY: point.clientY,\n          isVertical: context.isVertical,\n          isFlick: context.isFlick,\n          velocity: v //速度\n\n        });\n      } else {\n        context.isFlick = false;\n      }\n\n      if (context.isPan) {\n        //console.log(\"panEnd\");\n        this.dispatcher.dispatch(\"panend\", {\n          startX: context.startX,\n          startY: context.startY,\n          clientX: point.clientX,\n          clientY: point.clientY,\n          isVertical: context.isVertical,\n          isFlick: context.isFlick\n        });\n      }\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel(point, context) {\n      clearTimeout(context.handler); //console.log(\"cancel\", point.clientX, point.clientY);\n\n      this.dispatcher.dispatch(\"cancel\", {});\n    }\n  }]);\n\n  return Recognizer;\n}(); //实现一体化的处理方法\n\nfunction enableGesture(element) {\n  new Listerner(element, new Recognizer(new Dispatcher(element)));\n}\n\n//# sourceURL=webpack://jsx/./gesture.js?");

/***/ }),

/***/ "./main.js":
/*!*****************!*\
  !*** ./main.js ***!
  \*****************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _framework_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./framework.js */ \"./framework.js\");\n/* harmony import */ var _carousel_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./carousel.js */ \"./carousel.js\");\n\n //import { Timeline, Animation } from \"./animation.js\"\n\nvar d = [\"https://static001.geekbang.org/resource/image/bb/21/bb38fb7c1073eaee1755f81131f11d21.jpg\", \"https://static001.geekbang.org/resource/image/1b/21/1b809d9a2bdf3ecc481322d7c9223c21.jpg\", \"https://static001.geekbang.org/resource/image/b6/4f/b6d65b2f12646a9fd6b8cb2b020d754f.jpg\", \"https://static001.geekbang.org/resource/image/73/e4/730ea9c393def7975deceb48b3eb6fe4.jpg\"]; //document.body.appendChild(a);\n\nvar a = (0,_framework_js__WEBPACK_IMPORTED_MODULE_0__.createElement)(_carousel_js__WEBPACK_IMPORTED_MODULE_1__.Carousel, {\n  src: d\n});\na.mountTo(document.body); //自定义的标签应该用什么办法使其像普通的html元素一样操作呢？\n//在最新版的DOM标准里面是有办法的，需要注册一下自定义标签/元素的名称和类型\n//但是现行的比较安全的浏览器版本里面，不建议这样做\n//所以在使用element的时候，建议使用一个另外的接口，这里用了反向的操作\n//let tl = new Timeline();\n//window.tl = tl;\n//window.animation = new Animation({set a(v) { console.log(v)}}, \"a\", 0, 100, 1000, null);\n//不需要频繁地开启或重置timeLine了，可以支持动态地向一个timeLine去添加animation\n//tl.add(new Animation({}, \"a\", 0, 100, 1000, null));\n//tl.start();\n\n//# sourceURL=webpack://jsx/./main.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./main.js");
/******/ 	
/******/ })()
;