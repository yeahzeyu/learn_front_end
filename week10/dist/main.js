/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./Button.js":
/*!*******************!*\
  !*** ./Button.js ***!
  \*******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"STATE\": () => (/* reexport safe */ _framework_js__WEBPACK_IMPORTED_MODULE_0__.STATE),\n/* harmony export */   \"ATTRIBUTE\": () => (/* reexport safe */ _framework_js__WEBPACK_IMPORTED_MODULE_0__.ATTRIBUTE),\n/* harmony export */   \"Button\": () => (/* binding */ Button)\n/* harmony export */ });\n/* harmony import */ var _framework_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./framework.js */ \"./framework.js\");\n/* harmony import */ var _gesture_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./gesture.js */ \"./gesture.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n\n\n //可能会有其他组件会继承carousel.js，所以还需要再export一次\n\nvar Button = /*#__PURE__*/function (_Component) {\n  _inherits(Button, _Component);\n\n  var _super = _createSuper(Button);\n\n  function Button() {\n    _classCallCheck(this, Button);\n\n    return _super.call(this);\n  }\n\n  _createClass(Button, [{\n    key: \"render\",\n    value: function render() {\n      //如果要做到像react那样级联的render，这里还需要一定的设计\n      this.childContainer = (0,_framework_js__WEBPACK_IMPORTED_MODULE_0__.createElement)(\"span\", null).render();\n      this.root = (0,_framework_js__WEBPACK_IMPORTED_MODULE_0__.createElement)(\"div\", null, childContainer).render();\n      return this.root;\n    }\n  }]);\n\n  return Button;\n}(_framework_js__WEBPACK_IMPORTED_MODULE_0__.Component);\n\n//# sourceURL=webpack://jsx/./Button.js?");

/***/ }),

/***/ "./framework.js":
/*!**********************!*\
  !*** ./framework.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"createElement\": () => (/* binding */ createElement),\n/* harmony export */   \"STATE\": () => (/* binding */ STATE),\n/* harmony export */   \"ATTRIBUTE\": () => (/* binding */ ATTRIBUTE),\n/* harmony export */   \"Component\": () => (/* binding */ Component)\n/* harmony export */ });\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction createElement(type, attributes) {\n  var element;\n  if (typeof type === \"string\") //原生标签\n    element = new ElementWrapper(type);else //type为class，需生成实例\n    element = new type();\n\n  for (var name in attributes) {\n    element.setAttribute(name, attributes[name]);\n  }\n\n  for (var _len = arguments.length, children = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    children[_key - 2] = arguments[_key];\n  }\n\n  for (var _i = 0, _children = children; _i < _children.length; _i++) {\n    var child = _children[_i];\n\n    if (typeof child === \"string\") {\n      child = new TextWrapper(child);\n    }\n\n    element.appendChild(child);\n  }\n\n  return element;\n}\nvar STATE = Symbol(\"state\");\nvar ATTRIBUTE = Symbol(\"attribute\"); //这种实现方式下，你必须通过import，才能取到state，比较类似其他语言类的属性的protected模式\n\nvar Component = /*#__PURE__*/function () {\n  function Component(type) {\n    _classCallCheck(this, Component);\n\n    //this.root = this.render();\n    this[ATTRIBUTE] = Object.create(null); //创建一个空对象，我们尽量用比较正确的名字\n    // this.props = Object.create(null); //react这里是用props，因为它的attribute和property不分\n\n    this[STATE] = Object.create(null);\n  }\n\n  _createClass(Component, [{\n    key: \"render\",\n    value: function render() {\n      return this.root;\n    }\n  }, {\n    key: \"setAttribute\",\n    value: function setAttribute(name, value) {\n      //this.root.setAttribute(name, value);\n      this[ATTRIBUTE][name] = value;\n    }\n  }, {\n    key: \"appendChild\",\n    value: function appendChild(child) {\n      child.mountTo(this.root);\n    }\n  }, {\n    key: \"mountTo\",\n    value: function mountTo(parent) {\n      if (!this.root) this.render();\n      parent.appendChild(this.root);\n    }\n  }, {\n    key: \"triggerEvent\",\n    value: function triggerEvent(type, args) {\n      this[ATTRIBUTE][\"on\" + type.replace(/^[\\s\\S]/, function (s) {\n        return s.toUpperCase();\n      })](new CustomEvent(type, {\n        detail: args\n      }));\n    }\n  }]);\n\n  return Component;\n}();\n\nvar ElementWrapper = /*#__PURE__*/function (_Component) {\n  _inherits(ElementWrapper, _Component);\n\n  var _super = _createSuper(ElementWrapper);\n\n  function ElementWrapper(type) {\n    var _this;\n\n    _classCallCheck(this, ElementWrapper);\n\n    _this = _super.call(this);\n    _this.root = document.createElement(type);\n    return _this;\n  }\n\n  _createClass(ElementWrapper, [{\n    key: \"render\",\n    value: function render() {}\n  }]);\n\n  return ElementWrapper;\n}(Component);\n\nvar TextWrapper = /*#__PURE__*/function (_Component2) {\n  _inherits(TextWrapper, _Component2);\n\n  var _super2 = _createSuper(TextWrapper);\n\n  function TextWrapper(content) {\n    var _this2;\n\n    _classCallCheck(this, TextWrapper);\n\n    _this2 = _super2.call(this);\n    _this2.root = document.createTextNode(content);\n    return _this2;\n  }\n\n  _createClass(TextWrapper, [{\n    key: \"render\",\n    value: function render() {}\n  }]);\n\n  return TextWrapper;\n}(Component);\n\n//# sourceURL=webpack://jsx/./framework.js?");

/***/ }),

/***/ "./gesture.js":
/*!********************!*\
  !*** ./gesture.js ***!
  \********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Dispatcher\": () => (/* binding */ Dispatcher),\n/* harmony export */   \"Listerner\": () => (/* binding */ Listerner),\n/* harmony export */   \"Recognizer\": () => (/* binding */ Recognizer),\n/* harmony export */   \"enableGesture\": () => (/* binding */ enableGesture)\n/* harmony export */ });\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n//let element = document.documentElement;\n//let handler;\n//let startX, startY;\n//let isPan = false, isTap = true, isPress = false; //是否应该是全局的呢？\n//如果从触屏的角度考虑，会有多个触点的情况\n//如果从鼠标的角度考虑，会有左右键的区分\n//所以全局变量的形式是错误的\n//那么除了全局之外，剩下的只有一个选项，context\n//flick事件是以上事件中当中最为特殊的一个，因为它还需要判断速度\n//我们可以在move的时候得到当前这一次move的速度，但是这个并不能够帮助我们去处理，因为这个速度如果我们只判断两个点之间的速度，根据浏览器实现的不同，会有一个较大的误差，\n//所以我们对速度的判断，应该是取数个点的速度进行平均\n//这里会采用一个存储一段时间内的点的方式，来做平均速度的计算\n//进一步实现事件派发，dom里面事件的派发是使用new event实现的\nvar Dispatcher = /*#__PURE__*/function () {\n  function Dispatcher(element) {\n    _classCallCheck(this, Dispatcher);\n\n    this.element = element;\n  }\n\n  _createClass(Dispatcher, [{\n    key: \"dispatch\",\n    value: function dispatch(type, properties) {\n      //将原本的context, point先预处理成properties这样的kv结构后再传进来\n      //let event = new CustomEvent(type, {});\n      var event = new Event(type);\n\n      for (var name in properties) {\n        event[name] = properties[name];\n      } //dispatch实际上是需要是一个元素的\n\n\n      this.element.dispatchEvent(event); //console.log(event);\n    }\n  }]);\n\n  return Dispatcher;\n}(); //待补充，将剩余事件都实现派发，把事件加上必要的参数，我们所有需要的参数，基本都在context里面了\n//做一个解耦的分析，上述内容会分为三个部分\n//listen => recognize => dispatch\n//监听、识别而后重新分发\n// new Listener(new Recognizer(new Dispatcher))\n// new Listener(new Recognizer(dispatch))\n// Listerner可以是一个DOM Listener或者是别的\n// Dispatcher可以是一个DOM Dispatcher或者是别的\n\nvar Listerner = function Listerner(element, recognizer) {\n  var _this = this;\n\n  _classCallCheck(this, Listerner);\n\n  //把element和识别器放进来\n  var isTouch = false;\n  var touchTimeout = null;\n  var isListeningMouse = false; //用这个全局变量来表示是否已经开始监听鼠标了，如果已经开始监听，则不再绑定新的监听\n\n  var contexts = new Map();\n  this.element = element;\n  this.recognizer = recognizer; //在模拟环境下，mousedown和touchstart好像会同时触发，touchstart快一些，之后是mousedown\n  //鼠标支持左键、右键、中键、前进、后退，在浏览器的模型里面，它至少支持5个建的down和up\n\n  var mousedown = function mousedown(event) {\n    if (isTouch) return; //console.log(event.button);\n    //左中右：0、1、2，前后：3、4\n\n    var context = Object.create(null); //使用Object.create(null)表示我们要对一个对象做一个kv的匹配，这样可以避免object上那些原始的属性的干扰\n\n    contexts.set(\"mouse\" + (1 << event.button), context);\n\n    _this.recognizer.start(event, context);\n\n    var mousemove = function mousemove(event) {\n      //console.log(event.clientX, event.clientY);\n      //mousedown是分按键的，可mousemove是不分按键的\n      //但它包含一个buttons，buttons的值采用了一个古典的设计，使用二进制的掩码来做的，比如0b00001，代表的是左键被按下了，0b00010代表的是中键被按下，0b00011代表的是中键和左键被按下\n      var button = 1;\n\n      while (button <= event.buttons) {\n        //这个判断是为了保证button不会移出界\n        //这里还需要加一个判断，只有某个键被按下去了，才会进一步触发move，不能循环全部都调用move\n        //要用一个按位与的运算，这就是掩码的作用，在本例这里只有当button与event.button相同时，值才大于0\n        //这里其实还有一个坑，buttons的顺序跟我们通过1移动event.button位构造出来的数不是完全相同的，它们的第二位和第三位刚好是相反的，代表鼠标的中键和右键的那两位刚好是相反的\n        //所以这里需要做一个额外的处理\n        //order of buttons & button property is not same\n        if (button & event.buttons) {\n          var key = void 0;\n          if (button === 2) key = 4;else if (button === 4) key = 2;else key = button;\n\n          var _context = contexts.get(\"mouse\" + key);\n\n          _this.recognizer.move(event, _context);\n        }\n\n        button = button << 1;\n      }\n    };\n\n    var mouseup = function mouseup(event) {\n      //mouseup也是有button属性的\n      //console.log(\"end\", event.button);\n      //教程里面winter老师的测试当中是end 0发生了两次，实际上，end2等也有可能发生，当多个键被按下的时候，会触发多次mousedown的事件，由于左右键未必是真正同时被按下，\n      //所以先被按下的那个键会被绑定多次mouse move和mouse up的时间监听\n      var context = contexts.get(\"mouse\" + (1 << event.button));\n\n      _this.recognizer.end(event, context);\n\n      contexts[\"delete\"](\"mouse\" + (1 << event.button));\n\n      if (event.buttons === 0) {\n        document.removeEventListener(\"mousemove\", mousemove);\n        document.removeEventListener(\"mouseup\", mouseup);\n        isListeningMouse = false;\n      }\n    };\n\n    if (!isListeningMouse) {\n      document.addEventListener(\"mousemove\", mousemove);\n      document.addEventListener(\"mouseup\", mouseup);\n      isListeningMouse = true;\n    }\n  };\n\n  this.element.addEventListener(\"mousedown\", mousedown); //touch系列的事件跟鼠标有所不同，一旦触发了touchstart，之后必定会触发touchmove，且作用在同一元素上，因此不需要跟mousedown一样才去嵌套的写法\n  //理解上可以与mouse系列的一一对应，但其内在逻辑和我们写出来的代码是完全不一样的\n  //因为touchmove无法脱离touchstart而单独触发的，而鼠标不同，按不按都可以晃\n  //touch系列事件比mouse系列事件多了一个cancel\n\n  this.element.addEventListener(\"touchstart\", function (event) {\n    isTouch = true; //event.stopPropagation(); \n    //event.preventDefault();\n    //element.removeEventListener(\"mousedown\", mousedown);\n    //event里面有多个触点\n    //identifier是用来表示touch的唯一id\n    //console.log(event.changedTouches);\n\n    var _iterator = _createForOfIteratorHelper(event.changedTouches),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var touch = _step.value;\n        var context = Object.create(null);\n        contexts.set(touch.identifier, context); //console.log(\"start\", touch.clientX, touch.clientY);\n\n        _this.recognizer.start(touch, context);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  });\n  this.element.addEventListener(\"touchmove\", function (event) {\n    //console.log(event.changedTouches);\n    var _iterator2 = _createForOfIteratorHelper(event.changedTouches),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var touch = _step2.value;\n        //console.log(\"move\", touch.clientX, touch.clientY);\n        var context = contexts.get(touch.identifier);\n\n        _this.recognizer.move(touch, context);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  });\n  this.element.addEventListener(\"touchend\", function (event) {\n    clearTimeout(touchTimeout);\n    touchTimeout = setTimeout(function () {\n      isTouch = false;\n    }, 500); //console.log(event.changedTouches);\n\n    var _iterator3 = _createForOfIteratorHelper(event.changedTouches),\n        _step3;\n\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var touch = _step3.value;\n        //console.log(\"end\", touch.clientX, touch.clientY);\n        var context = contexts.get(touch.identifier);\n\n        _this.recognizer.end(touch, context);\n\n        contexts[\"delete\"](touch.identifier);\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n  });\n  this.element.addEventListener(\"touchcancel\", function (event) {\n    isTouch = false; //console.log(event.changedTouches);\n    //被异常事件打断，如alert\n\n    var _iterator4 = _createForOfIteratorHelper(event.changedTouches),\n        _step4;\n\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var touch = _step4.value;\n        var context = contexts.get(touch.identifier); //console.log(\"cancel\", touch.clientX, touch.clientY);\n\n        recognizer.cancel(touch);\n        contexts[\"delete\"](touch.identifier);\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n  });\n};\nvar Recognizer = /*#__PURE__*/function () {\n  function Recognizer(dispatcher) {\n    _classCallCheck(this, Recognizer);\n\n    this.dispatcher = dispatcher; //因为最后派发的肯定是一个函数\n  }\n\n  _createClass(Recognizer, [{\n    key: \"start\",\n    value: function start(point, context) {\n      var _this2 = this;\n\n      //console.log(\"start\", point.clientX, point.clientY);\n      context.startX = point.clientX, context.startY = point.clientY;\n      this.dispatcher.dispatch(\"start\", {\n        clientX: point.clientX,\n        clientY: point.clientY\n      });\n      context.points = [{\n        t: Date.now(),\n        x: point.clientX,\n        y: point.clientY\n      }];\n      context.isTap = true;\n      context.isPan = false;\n      context.isPress = false;\n      context.handler = setTimeout(function () {\n        context.isTap = false;\n        context.isPan = false;\n        context.isPress = true;\n        context.handler = null; //console.log(\"press\");\n\n        _this2.dispatcher.dispatch(\"press\", {});\n      }, 500);\n    }\n  }, {\n    key: \"move\",\n    value: function move(point, context) {\n      var dx = point.clientX - context.startX;\n      var dy = point.clientY - context.startY;\n\n      if (Math.pow(dx, 2) + Math.pow(dy, 2) > 100) {\n        context.isTap = false;\n        context.isPan = true;\n        context.isPress = false;\n        context.isVertical = Math.abs(dx) < Math.abs(dy); //用于区分是上下滑，还是左右滑\n        //console.log(\"panstart\");\n\n        this.dispatcher.dispatch(\"panstart\", {\n          startX: context.startX,\n          startY: context.startY,\n          clientX: point.clientX,\n          clientY: point.clientY,\n          isVertical: context.isVertical\n        });\n        clearTimeout(context.handler);\n      }\n\n      if (context.isPan) {\n        //console.log(dx, dy);\n        //console.log(\"pan\");\n        this.dispatcher.dispatch(\"pan\", {\n          startX: context.startX,\n          startY: context.startY,\n          clientX: point.clientX,\n          clientY: point.clientY,\n          isVertical: context.isVertical\n        });\n      } //在放进新的点之前会做一个过滤，让它只存取半秒内的速度，这样我们才能保正计算最新的速度\n\n\n      context.points = context.points.filter(function (point) {\n        return Date.now() - point.t < 500;\n      });\n      context.points.push({\n        t: Date.now(),\n        x: point.clientX,\n        y: point.clientY\n      }); //console.log(\"move\", point.clientX, point.clientY);\n    }\n  }, {\n    key: \"end\",\n    value: function end(point, context) {\n      if (context.isTap) {\n        //console.log(\"tap\");\n        this.dispatcher.dispatch(\"tap\", {});\n        clearTimeout(context.handler);\n      }\n\n      if (context.isPress) {\n        this.dispatcher.dispatch(\"pressend\", {}); //console.log(\"pressEnd\");\n      } //console.log(\"end\", point.clientX, point.clientY);\n\n\n      context.points = context.points.filter(function (point) {\n        return Date.now() - point.t < 500;\n      }); //由于最后停下来时可能会导致数组为空，因此在此处多push一个点进去\n\n      /*\r\n      context.points.push({\r\n          t: Date.now(),\r\n          x: point.clientX,\r\n          y: point.clientY\r\n      })\r\n      */\n\n      var d, v;\n\n      if (!context.points.length) {\n        v = 0;\n      } else {\n        d = Math.sqrt(Math.pow(point.clientX - context.points[0].x, 2) + Math.pow(point.clientY - context.points[0].y, 2)); //三角形公式 a**2 + b**2 = c**2\n\n        v = d / (Date.now() - context.points[0].t);\n      } //根据经验，我们可以认为这个速度是大于1.5像素每毫秒就是比较快的了\n      //console.log(\"v\", v);\n\n\n      if (v > 1.5) {\n        //console.log(\"flick\");\n        context.isFlick = true;\n        this.dispatcher.dispatch(\"flick\", {\n          startX: context.startX,\n          startY: context.startY,\n          clientX: point.clientX,\n          clientY: point.clientY,\n          isVertical: context.isVertical,\n          isFlick: context.isFlick,\n          velocity: v //速度\n\n        });\n      } else {\n        context.isFlick = false;\n      }\n\n      if (context.isPan) {\n        //console.log(\"panEnd\");\n        this.dispatcher.dispatch(\"panend\", {\n          startX: context.startX,\n          startY: context.startY,\n          clientX: point.clientX,\n          clientY: point.clientY,\n          isVertical: context.isVertical,\n          isFlick: context.isFlick,\n          velocity: v //速度\n\n        });\n      } //避免XX的bug\n\n\n      this.dispatcher.dispatch(\"end\", {\n        startX: context.startX,\n        startY: context.startY,\n        clientX: point.clientX,\n        clientY: point.clientY,\n        isVertical: context.isVertical,\n        isFlick: context.isFlick,\n        velocity: v //速度\n\n      });\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel(point, context) {\n      clearTimeout(context.handler); //console.log(\"cancel\", point.clientX, point.clientY);\n\n      this.dispatcher.dispatch(\"cancel\", {});\n    }\n  }]);\n\n  return Recognizer;\n}(); //实现一体化的处理方法\n\nfunction enableGesture(element) {\n  new Listerner(element, new Recognizer(new Dispatcher(element)));\n}\n\n//# sourceURL=webpack://jsx/./gesture.js?");

/***/ }),

/***/ "./main.js":
/*!*****************!*\
  !*** ./main.js ***!
  \*****************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _framework_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./framework.js */ \"./framework.js\");\n/* harmony import */ var _Button_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Button.js */ \"./Button.js\");\n\n\nvar a = (0,_framework_js__WEBPACK_IMPORTED_MODULE_0__.createElement)(_Button_js__WEBPACK_IMPORTED_MODULE_1__.Button, null);\na.mountTo(document.body);\n\n//# sourceURL=webpack://jsx/./main.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./main.js");
/******/ 	
/******/ })()
;